//
//  AuthorsListInteractorTests.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheBlog
import XCTest
import Services
import Ivorywhite

class AuthorsListInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: AuthorsListInteractor!

    // MARK: Tests
    
    func testFetchFirstAuthors(){
        // Given
        let presenter = AuthorsListPresentationLogicSpy()
        let worker = AuthorsListWorkLogicMock()
        sut = AuthorsListInteractor(presenter: presenter, worker: worker)
        sut.page = 0
        sut.authorsFirstPage = 2
        sut.authorsPerPage = 2

        // When
        sut.fetchFirstAuthors()
    
        // Then
        XCTAssertTrue(worker.requestAuthorsCalled,
                      "fetchFirstAuthors() should ask the worker to request authors")
        XCTAssertEqual(worker.authors?.first?.id, 1,
                       "fetchFirstAuthors() should return the correct authors subset")
        XCTAssertTrue(presenter.presentAuthorsCalled,
                      "fetchFirstAuthors() should ask the presenter to format the result")
    }

    func testFetchNextAuthors(){
        // Given
        let presenter = AuthorsListPresentationLogicSpy()
        let worker = AuthorsListWorkLogicMock()
        sut = AuthorsListInteractor(presenter: presenter, worker: worker)
        sut.page = 1
        sut.authorsFirstPage = 2
        sut.authorsPerPage = 2

        // When
        sut.fetchNextAuthors()

        // Then
        XCTAssertTrue(worker.requestAuthorsCalled,
                      "fetchFirstAuthors() should ask the worker to request authors")
        XCTAssertEqual(worker.authors?.first?.id, 3,
                       "fetchFirstAuthors() should return the correct authors subset")
        XCTAssertTrue(presenter.presentAuthorsCalled,
                      "fetchFirstAuthors() should ask the presenter to format the result")
    }
}

// MARK: Test doubles

class AuthorsListPresentationLogicSpy: AuthorsListPresentationLogic {
    var presentAuthorsCalled = false
    var presentErrorCalled = false

    func presentAuthors(_ authors: Authors) {
        presentAuthorsCalled = true
    }

    func presentError(_ error: Error) {
        presentErrorCalled = true
    }
}

class AuthorsListWorkLogicMock: AuthorsListWorkLogic {
    var requestAuthorsCalled = false
    var authors: Authors?
    func requestAuthors(page: Int, authorsPerPage: Int?, completion: @escaping (Authors?, Error?) -> Void) {
        requestAuthorsCalled = true
        let service = BlogServiceMock()
        _ = service.requestAuthors(page: page, authorsPerPage: authorsPerPage) { (authors, error) in
            self.authors = authors
            completion(authors, nil)
        }
    }
}



