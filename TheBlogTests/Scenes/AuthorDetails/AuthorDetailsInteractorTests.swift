//
//  AuthorDetailsInteractorTests.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheBlog
import XCTest
import Services
import Ivorywhite

class AuthorDetailsInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: AuthorDetailsInteractor!

    // MARK: Tests

    func testRequestAuthor() {
        // Given
        let presenter = AuthorDetailsPresentationLogicSpy()
        let worker = AuthorDetailsWorkLogicMock()
        sut = AuthorDetailsInteractor(presenter: presenter, worker: worker)

        // When
        sut.fetchAuthor()

        // Then
        XCTAssertTrue(presenter.presentAuthorCalled,
                      "fetchFirstPosts() should ask the presenter to format the result")
    }

    func testFetchFirstPosts() {
        // Given
        let presenter = AuthorDetailsPresentationLogicSpy()
        let worker = AuthorDetailsWorkLogicMock()
        let dataMock = BlogServiceMock()
        sut = AuthorDetailsInteractor(presenter: presenter, worker: worker)
        sut.page = 0
        sut.postsFirstPage = 2
        sut.postsPerPage = 2
        sut.author = dataMock.authorsMock.first!

        // When
        sut.fetchFirstPosts()
    
        // Then
        XCTAssertTrue(worker.requestPostsCalled,
                      "fetchFirstPosts() should ask the worker to request posts")
        XCTAssertEqual(worker.posts?.first?.id, 10,
                       "fetchFirstPosts() should return the correct posts subset")
        XCTAssertTrue(presenter.presentPostsCalled,
                      "fetchFirstPosts() should ask the presenter to format the result")
    }

    func testFetchNextPosts() {
        // Given
        let presenter = AuthorDetailsPresentationLogicSpy()
        let worker = AuthorDetailsWorkLogicMock()
        let dataMock = BlogServiceMock()
        sut = AuthorDetailsInteractor(presenter: presenter, worker: worker)
        sut.page = 1
        sut.postsFirstPage = 2
        sut.postsPerPage = 2
        sut.author = dataMock.authorsMock.first!

        // When
        sut.fetchNextPosts()

        // Then
        XCTAssertTrue(worker.requestPostsCalled,
                      "fetchFirstAuthors() should ask the worker to request posts")
        XCTAssertEqual(worker.posts?.first?.id, 30,
                       "fetchFirstAuthors() should return the correct posts subset")
        XCTAssertTrue(presenter.presentPostsCalled,
                      "fetchFirstAuthors() should ask the presenter to format the result")
    }
}

// MARK: Test doubles

class AuthorDetailsPresentationLogicSpy: AuthorDetailsPresentationLogic {
    var presentAuthorCalled = false
    var presentPostsCalled = false
    var presentErrorCalled = false

    func presentAuthor(_ author: Author?) {
        presentAuthorCalled = true
    }

    func presentPosts(_ posts: Posts) {
        presentPostsCalled = true
    }

    func presentError(_ error: Error) {
        presentErrorCalled = true
    }
}

class AuthorDetailsWorkLogicMock: AuthorDetailsWorkLogic {


    var requestPostsCalled = false
    var posts: Posts?

    func requestPosts(authorId: Int, page: Int, postsPerPage: Int?, orderBy: PostsOrderBy?, direction: SortDirection?, completion: @escaping (Posts?, Error?) -> Void) {

        requestPostsCalled = true
        let service = BlogServiceMock()
        _ = service.requestPosts(authorId: authorId, page: page, postsPerPage: postsPerPage, orderBy: orderBy, direction: direction, completion: { (posts, error) in
            self.posts = posts
            completion(posts, nil)
        })
    }
}



