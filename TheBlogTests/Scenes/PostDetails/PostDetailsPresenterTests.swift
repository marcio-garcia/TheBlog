//
//  PostDetailsPresenterTests.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheBlog
import XCTest
import Services

class PostDetailsPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: PostDetailsPresenter!
  
  // MARK: Tests

    func testPresentPost() {
        // Given
        sut = PostDetailsPresenter()
        let spy = PostDetailsDisplayLogicSpy()
        sut.viewController = spy

        let dataMock = BlogServiceMock()

        // When
        sut.presentPost(dataMock.postsMock.first!)

        // Then
        XCTAssertTrue(spy.displayPostCalled,
                      "presentComments() should ask the view controller to display the result")
    }

    func testPresentComments() {
        // Given
        sut = PostDetailsPresenter()
        let spy = PostDetailsDisplayLogicSpy()
        sut.viewController = spy

        // When
        sut.presentComments([])
    
        // Then
        XCTAssertTrue(spy.displayCommentsCalled,
                      "presentComments() should ask the view controller to display the result")
    }

    func testPresentError() {
        // Given
        sut = PostDetailsPresenter()
        let spy = PostDetailsDisplayLogicSpy()
        sut.viewController = spy

        // When
        sut.presentError(NSError(domain: "Error", code: 0, userInfo: nil))

        // Then
        XCTAssertTrue(spy.displayErrorCalled, "presentError() should ask the view controller to display the error")
    }
}

// MARK: Test doubles

class PostDetailsDisplayLogicSpy: PostDetailsDisplayLogic {
    var displayPostCalled = false
    var displayCommentsCalled = false
    var displayErrorCalled = false

    func displayPost(_ Post: Post?) {
        displayPostCalled = true
    }

    func displayComments(_ comments: Comments) {
        displayCommentsCalled = true
    }

    func displayError(title: String, message: String) {
        displayErrorCalled = true
    }
}
