//
//  PostDetailsInteractorTests.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheBlog
import XCTest
import Services
import Ivorywhite

class PostDetailsInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: PostDetailsInteractor!

    // MARK: Tests
    
    func testFetchFirstComments(){
        // Given
        let presenter = PostDetailsPresentationLogicSpy()
        let worker = PostDetailsWorkLogicMock()
        let dataMock = BlogServiceMock()
        sut = PostDetailsInteractor(presenter: presenter, worker: worker)
        sut.page = 0
        sut.commentsFirstPage = 2
        sut.commentsPerPage = 2
        sut.post = dataMock.postsMock.first!

        // When
        sut.fetchFirstComments()
    
        // Then
        XCTAssertTrue(worker.requestCommentsCalled,
                      "fetchFirstComments() should ask the worker to request comments")
        XCTAssertEqual(worker.comments?.first?.id, 100,
                       "fetchFirstComments() should return the correct comments subset")
        XCTAssertTrue(presenter.presentCommentsCalled,
                      "fetchFirstComments() should ask the presenter to format the result")
    }

    func testFetchNextComments(){
        // Given
        let presenter = PostDetailsPresentationLogicSpy()
        let worker = PostDetailsWorkLogicMock()
        let dataMock = BlogServiceMock()
        sut = PostDetailsInteractor(presenter: presenter, worker: worker)
        sut.page = 1
        sut.commentsFirstPage = 2
        sut.commentsPerPage = 2
        sut.post = dataMock.postsMock.first!

        // When
        sut.fetchNextComments()

        // Then
        XCTAssertTrue(worker.requestCommentsCalled,
                      "fetchNextComments() should ask the worker to request comments")
        XCTAssertEqual(worker.comments?.first?.id, 300,
                       "fetchNextComments() should return the correct comments subset")
        XCTAssertTrue(presenter.presentCommentsCalled,
                      "fetchNextComments() should ask the presenter to format the result")
    }
}

// MARK: Test doubles

class PostDetailsPresentationLogicSpy: PostDetailsPresentationLogic {
    var presentPostCalled = false
    var presentCommentsCalled = false
    var presentErrorCalled = false

    func presentPost(_ post: Post?) {
        presentPostCalled = true
    }

    func presentComments(_ comments: Comments) {
        presentCommentsCalled = true
    }

    func presentError(_ error: Error) {
        presentErrorCalled = true
    }
}

class PostDetailsWorkLogicMock: PostDetailsWorkLogic {
    var requestCommentsCalled = false
    var comments: Comments?

    func requestComments(postId: Int, page: Int, commentsPerPage: Int?, orderBy: CommentsOrderBy?, direction: SortDirection?, completion: @escaping (Comments?, Error?) -> Void) {

        requestCommentsCalled = true
        let service = BlogServiceMock()
        _ = service.requestComments(postId: postId, page: page, commentsPerPage: commentsPerPage, orderBy: orderBy, direction: direction, completion: { (comments, error) in
            self.comments = comments
            completion(comments, nil)
        })
    }
}



