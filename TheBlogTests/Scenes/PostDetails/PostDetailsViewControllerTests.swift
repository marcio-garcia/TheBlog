//
//  PostDetailsViewControllerTests.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheBlog
import XCTest
import Services

class PostDetailsViewControllerTests: XCTestCase {
    // MARK: Subject under test
  
    var sut: PostDetailsViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        window = UIWindow()
    }
  
    override func tearDown() {
        window = nil
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func loadView(){
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
  
  // MARK: Tests
    
    func testShouldFetchAuthorsWhenViewIsLoaded() {
        // Given
        let spy = PostDetailsBusinessLogicSpy()
        sut = PostDetailsViewController()
        sut.interactor = spy
    
        // When
        loadView()
    
        // Then
        XCTAssertTrue(spy.fetchFirstCommentsCalled,
                      "viewDidLoad() should ask the interactor to fetch the first page of comments")
    }
  
    func testDisplayComments() {
        // Given
        let contentView = PostDetailsContentViewSpy()
        sut = PostDetailsViewController()
        sut.contentView = contentView

        // When
        loadView()
        sut.displayComments([])
    
        // Then
        XCTAssertTrue(contentView.updateCommentsCalled,
                      "displayComments() should update the contentView")
    }

    func testDisplayPosts() {
        // Given
        let contentView = PostDetailsContentViewSpy()
        sut = PostDetailsViewController()
        sut.contentView = contentView

        // When
        loadView()
        sut.displayPost(nil)

        // Then
        XCTAssertTrue(contentView.updatePostCalled,
                      "displayPost() should update the contentView")
    }
}

// MARK: Test doubles

class PostDetailsBusinessLogicSpy: PostDetailsBusinessLogic {
    var fetchPostCalled = false
    var fetchFirstCommentsCalled = false
    var fetchNextCommentsCalled = false

    func fetchPost() {
        fetchPostCalled = true
    }

    func fetchFirstComments() {
        fetchFirstCommentsCalled = true
    }

    func fetchNextComments() {
        fetchNextCommentsCalled = true
    }
}

class PostDetailsContentViewSpy: UIView, PostDetailsContentViewProtocol {
    var updatePostCalled = false
    var updateCommentsCalled = false

    func updatePost(_ post: Post?) {
        updatePostCalled = true
    }

    func updateComments(comments: Comments) {
        updateCommentsCalled = true
    }
}
