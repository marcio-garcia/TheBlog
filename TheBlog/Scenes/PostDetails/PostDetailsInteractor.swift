//
//  PostDetailsInteractor.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Services

protocol PostDetailsBusinessLogic {
    func fetchPost()
    func fetchFirstComments()
    func fetchNextComments()
}

protocol PostDetailsDataStore {
    var post: Post? { get set }
}

class PostDetailsInteractor: PostDetailsBusinessLogic, PostDetailsDataStore {
  
    var presenter: PostDetailsPresentationLogic?
    var worker: PostDetailsWorkLogic
  
    var post: Post?
    var page = 0
    var commentsFirstPage = 40
    var commentsPerPage = 20

    // MARK: Object lifecycle
    
    init(presenter: PostDetailsPresentationLogic?, worker: PostDetailsWorkLogic) {
        self.presenter = presenter
        self.worker = worker
    }

    // MARK: Fetch data
    func fetchPost() {
        presenter?.presentPost(post)
    }

    func fetchFirstComments() {
        page = 1
        performRequest(page: page, commentsPerPage: commentsFirstPage)
    }

    func fetchNextComments() {
        page += 1
        performRequest(page: page, commentsPerPage: commentsPerPage)
    }

    private func performRequest(page: Int, commentsPerPage: Int?) {
        guard let post = self.post else {
            let error = NSError(domain: "Data", code: 999, userInfo: [NSLocalizedDescriptionKey : "No post selected"])
            presenter?.presentError(error)
            return
        }

        worker.requestComments(postId: post.id,
                               page: page,
                               commentsPerPage: commentsPerPage,
                               orderBy: CommentsOrderBy.date,
                               direction: SortDirection.asc) { [weak self] comments, error in

            if let _error = error {
                self?.presenter?.presentError(_error)
                return
            }
            guard let comments = comments else { return }
            self?.presenter?.presentComments(comments)
        }
    }
}
