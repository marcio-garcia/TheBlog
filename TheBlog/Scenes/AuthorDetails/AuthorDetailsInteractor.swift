//
//  AuthorDetailsInteractor.swift
//  TheBlog
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Services

protocol AuthorDetailsBusinessLogic {
    func fetchAuthor() -> Author?
}

protocol AuthorDetailsDataStore {
    var author: Author? { get set }
}

class AuthorDetailsInteractor: AuthorDetailsBusinessLogic, AuthorDetailsDataStore {
  
    var presenter: AuthorDetailsPresentationLogic?
    var worker: AuthorDetailsWorkLogic
  
    var author: Author?

    // MARK: Object lifecycle
    
    init(presenter: AuthorDetailsPresentationLogic?, worker: AuthorDetailsWorkLogic) {
        self.presenter = presenter
        self.worker = worker
    }

    // MARK: Fetch data
    func fetchAuthor() -> Author? {
        return author
    }

    private func performRequest(page: Int, authorsPerPage: Int?) {
        worker.requestAuthors(page: page, authorsPerPage: authorsPerPage) { [weak self] authors, error in
            if let _error = error {
                let response = AuthorDetails.Error.Response(message: _error.localizedDescription)
                self?.presenter?.presentError(response: response)
                return
            }
            guard let authors = authors else { return }
            let response = AuthorDetails.FetchAuthors.Response(authors: authors)
            self?.presenter?.presentAuthors(response: response)
        }
    }
}
